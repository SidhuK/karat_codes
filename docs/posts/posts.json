[
  {
    "path": "posts/2022-05-21-vscode-vs-rstudio-worth-the-switch/",
    "title": "VSCode vs RStudio — Worth the Switch?",
    "description": "Does Microsoft’s flagship code editor hold up against the old favorite?",
    "author": [
      {
        "name": "Karat Sidhu",
        "url": {}
      }
    ],
    "date": "2022-05-19",
    "categories": [
      "VSCode",
      "Review",
      "Long-read"
    ],
    "contents": "\n\nContents\nRStudio vs VSCode -\nShould you switch?\nIf you\nare only interested in my conclusion or the TLDR; :\nInstallation\nSetting up the editor\nWorking\nwith R code\nRunning Code\nA Note\nAbout Quarto\nWhat I love about R in\nVSCode\nWhat I don’t love about R in\nVSCode\nThings I hope to try soon\nwith VScode\nConclusion\nFurther\nReading\n\n\n\nRStudio vs VSCode -\nShould you switch?\nRStudio is the preferred IDE/Editor for running R code for most\npeople, but VSCode has rapidly become one of the most popular code\neditors for a huge number of other languages. This writeup is for people\nwho are very familiar with RStudio and want to see how the two compare.\nSo, I will not be talking a lot about RStudio because for that reason,\nbut going into the strengths and weaknesses of VSCode compared to\nRStudio.\nFurther, I this is a very brief overview comparing the community\n(free) versions of both editors, I cannot speak to the R-Studio paid\neditions.\nI am a low-intermediate level programmer who doesn’t use R as much as\nsome people do but whenever I do, RStudio is my preferred editor of\nchoice. For everything else (Python, Jupyter, HTML, CSS, JS,etc ), I\ntend to use VSCode. I tried VSCode for R because I wanted to see if I\ncould use a single code editor for everything I do.\nRStudio is an outstanding piece of software and has never given me\nany major problems during my workflows, this was just an experiement to\nfind a one-size-fits all code editor/IDE.\nIf you\nare only interested in my conclusion or the TLDR; :\nNo, I will not be switching to VSCode for R - FOR NOW. But I love how\ngreat R looks and works on it already.\nNow that we’re done with that, lets get into some of the details:\nInstallation\nAssuming you already have R installed on your system, Installing\nVSCode and R is very straightforward;\ndownload the .pkg or .exe file and install the code editor;\ninstall the languageserver package for R\n(install.packages(“languageserver”)\ninstall the R extension from the markeplace (https://marketplace.visualstudio.com/items?itemName=REditorSupport)\nand you’re ready to start coding.\nOptional: You can install a better terminal alternative like radian,\na debugger and a better plotviewer like httpgd because the builtin\nplotviewer for VSCode isn’t a particualrly good one.\nSetting up the editor\nYou can now start working with code but there are potentially times\nyou could run into errors while running your code.\nTo eliminate any potential errors/code not work, you must make sure\nthe R path is specified in the VSCode preferences (cmd+shift+p on mac)\nand search for R path. Finding the path is simple, open R and type:\nR.home(“bin”) and copy the output path.\nAnother somewhat major tweak you would want to do to the editor:\nSome simple shortcuts like the pipe operator doesn’t work out of the\nbox, so adding a shortcut for “%>%” or “|>” depending on your\npreference can be done using the following method:\nhttps://stackoverflow.com/questions/58731362/how-do-i-had-an-alias-for-magrittr-pipe-from-r-in-vscode\nHow do I had an alias for magrittr pipe from R in vscode - Stack\nOverflow\nWorking with R code\nHere is a comparison of my two setups side by side with the same file\nand environment:\n\n\nworking with R is very similar to a regular RStudio IDE,\nR-extension provides the same support for\ninstalling packages,\nplots and plot viewer\ngrobal enviroment\ndatasets\nplots\nlists, variables, etc.\n\nchecking loaded packages etc.\nTerminal and console position can be modified to make get the input\nand output panes next to each other, something you cannot do well in\nR-Studio. So VSCode feels very familiar and running code is highly\nintuitive.\nRunning Code\nRunning a piece of code is again, very similar to RStudio. A run file\nbutton is located at the top of the panel and individual lines of code\ncan be run using the cmd+return shortcut on mac. The shortcut can be\neasily modified similar to how the pipe operator shortcut is modified\nabove.\nIn terms of running and getting results for plain R code and .R\nfiles; VSCode is a great alternative for a lot of people including me.\nSo if you’re like me and you use R mainly for statistical analysis, data\nvisualization and data analysis; give VSCode a try.\nWorking with Notebooks and Rmd:\nThis is where VSCode falls so much behind RStudio it becomes a one\nhorse race. The notebook support in VSCode is in a single word -\nterrible. Running code chunks in a .Rmd notebook feels and looks dated.\nMy existing notebooks created in RStudio were buggy in VSCode despite\nnot showing any errors in RStudio. Creating new notebooks is unintuitive\nand still a long way behind RStudio in terms of the overall feel to\nit.\nI have searched for solutions, including globally installing pandoc,\nknitr and rmarkdown etc and trying multiple versions of R and the\npackages mentioned previously to no avail. This is one of the biggest\nreasons I am not completely switching to VSCode just yet.\nA Note About Quarto\nI recently started playing around with Quarto, which looks like the\nnatural successor to Rmarkdown. So far, I have only used Quarto in\nRStudio and am a big fan of the way it looks and works. I have yet to\ntry it on VSCode, so I cannot comment on it.\nWhat I love about R in\nVSCode\nSpeed - VSCode is quick to load up, fast and snappy when the code\nis running. I did not do any analysis on the times it took to load a\npiece of code on one vs the other but VSCode ‘feels’ quicker.\nOne stop shop for R, Python, HTML, CSS, and dozens other\nlanguages - and does it much better than RStudio\nMULTIPLE R SESSIONS!!! - Such a great feature when you’re trying\nto develop several related projects at the same time.\nCode Refactoring - much better than RStudio\nColor picker and color blocksFor people like me who work with a\nlot of data visualizations, the ability to see the colors and use the\ncolor blocks to pick colors seamlessly is a gamechanger.\n\nLanguage server - document outline - Navigating through a long\nline of code (and multiple R files) is painless\nIntellisense and Code Completion - faster, more user\nfriendly\n\nHelp and documentation: Same information, much more streamlined\n\nLiveshare and working with teams\nCode Snippets are easier to use and set up than RStudio\nMuch easier git and version control integration\nFunctions are handled brilliantly. Hover over them and you get\nall kinds of information and callbacks.\nCode organization: Code sections allow for folding of code, makes\nfo easier code reading and naviation and cleaner code overall.\n\nCustomizable and make it your own by editing the json files inside\nVSCode.\nSo VSCode has some amazing features that could really tempt an\nRStudio user.\nWhat I don’t love about R in\nVSCode\nR-studio works great out of the box, no need to install extensions\nwhile VSCode setup for R can be tricky and can sometimes involve trail\nand error\nR-templates inside R studio are amazing, and easy to find and\nuse\nDataviewer in RStudio feels a lot better than VScode, especially\nwhen working with a large dataset\nEven though I use VSCode for Python, HTML, CSS etc, coding R in it,\nespecially for the first few hours feels very odd and in a way\nunfamiliar despite the very familiar overall IDE organization\nNOTEBOOK SUPPORT - If you work with rmd more than r, DO NOT SWITCH.\nRunning chunks of code is very clunky and poor\nKnitting notebooks doesnt work well at all, and can lead to errors a\nlot of the time.\nPlot viewers are still not as good as RStudio\nTerminal will sometimes throw errors in VSCode that you wouldn’t\nfind for the same piece of code in RStudio\nRStudio just feels a lot more tailored to a data\nscientist/statistical analysis person, while VSCode can feel like a\ndeveloper-centric code editor\nFeels a lot more tailored to a data scientist/statistical\nanalysis\nThings I hope to try soon\nwith VScode\nQuarto\nRblogdown and Rbookdown\nMore Debugging\nRadian terminal\nConclusion\nDo I love R in VSCode so far? Absolutely\nEnough to make me want to switch? Not yet.\nWhy? Notebooks\nWill I switch soon? Hopefully yes.\nIf\nyou liked this, and have any suggestions for me; find me on twitter: https://twitter.com/karat_sidhu\nFurther Reading\nA great video and blog by Kun Ren on the subject : https://youtu.be/9xXBDU2z_8Y\nA blog on the same subject: https://renkun.me/2019/12/11/writing-r-in-vscode-a-fresh-start/\nRunning R in VSCode: https://www.infoworld.com/article/3625488/how-to-run-r-in-visual-studio-code.html\nInsalling R in VSCode: https://code.visualstudio.com/docs/languages/r\nBonus: Quarto vs RMD: https://yihui.org/en/2022/04/quarto-r-markdown/\nThis writeup is also available on Towards Data Science\nVSCode\nvs RStudio Worth the switch? | Karat Sidhu | Towards Data Science\n(medium.com)\n\n\n\n",
    "preview": {},
    "last_modified": "2022-05-21T12:15:45+05:30",
    "input_file": {}
  },
  {
    "path": "posts/2022-05-21-looking-at-eurovision-winners-with-gt/",
    "title": "Eurovision winners with gt() and gtextras()",
    "description": "Using gt() package to make a great looking table.",
    "author": [
      {
        "name": "Karat Sidhu",
        "url": {}
      }
    ],
    "date": "2022-05-17",
    "categories": [
      "TidyTuesday",
      "Data-Viz",
      "TidyVerse"
    ],
    "contents": "\n\nContents\nLoading\nLibraries\nload data\nCleaning\nData\nJust the finale winners\nData to make the table\nMaking\nthe gt() table\n\nMaking a table using the gt and gtextras package in R to look at the\nEurovision winners from 2004 to 2022.\nLoading Libraries\n\n\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(gtExtras)\n\n\n\nload data\n\n\neurovision <-\n  readr::read_csv(\n    \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-17/eurovision.csv\"\n  )\n\n\n\nCleaning Data\n\n\neurovision <- eurovision |>\n  select(\n    -c(\n      event_url,\n      artist_url,\n      country_emoji,\n      rank_ordinal,\n      running_order,\n      qualified,\n      event\n    )\n  )\n\n\n\nJust the finale winners\n\n\neurovision <- eurovision |>\n  filter(section == \"grand-final\") |>\n  group_by(year) |>\n  mutate(average_points = mean(total_points)) |>\n  ungroup()\n\n\n\nData to make the table\n\n\neurovision_table <- eurovision |>\n  group_by(artist_country) |>\n  filter(section == \"grand-final\") |>\n  filter(winner == \"TRUE\") |>\n  select(-c(section, rank, winner)) |>\n  select(year, everything())\n\n\n\nMaking the gt() table\n\n\ntable  <- eurovision_table |>\n  gt() |>\n  gt_color_rows(total_points:average_points,\n                type = \"discrete\",\n                palette = \"ggsci::orange_material\",\n  ) |>\n  gt_img_rows(columns = image_url,\n              img_source = \"web\",\n              height = 30) |>\n  gt_theme_538() |>\n  tab_header(\n    title = \"Eurovision Song Contest Winners 2004 - 2022\",\n    subtitle = \"Winners of the Eurovision Song contest grand finales from 2004 to 2022. An average of 26 countries participated\n    in the song contest and the following countries won after advancing to the final rounds. The table details the winning artists\n    and the total points for the corresponding winners; in addition total scores for each winner and the average score for that year.\n    Data grouped by country.\"\n  ) |>\n  tab_source_note(source_note = md(\n    glue::glue(\n      \"Data : {fontawesome::fa('twitter')} Tanya Shapiro | Graphic : {fontawesome::fa('github')} github.com/SidhuK\"\n    )\n  )) |>\n  tab_footnote(footnote = \"Highest Points by a winner\",\n               locations = cells_row_groups(groups = \"Portugal\")) |>\n  tab_style(locations = cells_title(groups = 'title'), # format the main title\n            style = list(\n              cell_text(\n                font = google_font(name = 'Bebas Neue'),\n                size = px(60),\n                color = 'indianred',\n                weight = 700\n              )\n            )) |>\n  gt_merge_stack(col1 = host_city,\n                 col2 = host_country) |> # trim the table a bit\n  gt_merge_stack(col1 = artist,\n                 col2 = song) |>\n  tab_options(table.background.color = \"#f1ebda\",\n              column_labels.background.color = \"#f1ebda\") # set the bg color\ntable\n\n\n\nEurovision Song Contest Winners 2004 - 2022\n    Winners of the Eurovision Song contest grand finales from 2004 to 2022. An average of 26 countries participated\n    in the song contest and the following countries won after advancing to the final rounds. The table details the winning artists\n    and the total points for the corresponding winners; in addition total scores for each winner and the average score for that year.\n    Data grouped by country.\n    year\n      host_city\n      artist\n      image_url\n      total_points\n      average_points\n    Ukraine\n    2022\nTurin\nItaly\nKalush Orchestra\nStefania\n\n631\n185.600002016\nStockholm\nNetherlands\nJamala\nZitti E Buoni\n\n534\n187.384622004\nIstanbul\nIsrael\nRuslana\nArcade\n\n280\n87.00000Italy\n    2021\nRotterdam\nPortugal\nMåneskin\nTOY\n\n524\n174.00000Netherlands\n    2019\nTel Aviv\nUkraine\nDuncan Laurence\nAmar Pelos Dois\n\n498\n182.92308Israel\n    2018\nLisbon\nSweden\nNetta\n1944\n\n529\n191.84615Portugal1\n    2017\nKyiv\nAustria\nSalvador Sobral\nHeroes\n\n758\n187.38462Sweden\n    2015\nVienna\nDenmark\nMåns Zelmerlöw\nRise Like a Phoenix\n\n365\n85.925932012\nBaku\nSweden\nLoreen\nOnly Teardrops\n\n372\n93.69231Austria\n    2014\nCopenhagen\nAzerbaijan\nConchita Wurst\nEuphoria\n\n290\n82.53846Denmark\n    2013\nMalmö\nGermany\nEmmelie de Forest\nRunning Scared\n\n281\n87.00000Azerbaijan\n    2011\nDüsseldorf\nNorway\nEll/Nikki\nSatellite\n\n221\n99.76000Germany\n    2010\nOslo\nRussia\nLena\nFairytale\n\n246\n90.48000Norway\n    2009\nMoscow\nSerbia\nAlexander Rybak\nBelieve\n\n387\n97.44000Russia\n    2008\nBelgrade\nFinland\nDima Bilan\nMolitva\n\n272\n99.76000Serbia\n    2007\nHelsinki\nGreece\nMarija Šerifović\nHard Rock Hallelujah\n\n268\n101.50000Finland\n    2006\nAthens\nUkraine\nLordi\nMy Number One\n\n292\n91.83333Greece\n    2005\nKyiv\nTurkey\nHelena Paparizou\nWild Dances\n\n230\n94.25000Data :  Tanya Shapiro | Graphic :  github.com/SidhuK\n    1 Highest Points by a winner\n    \n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-05-21T10:45:03+05:30",
    "input_file": {}
  },
  {
    "path": "posts/2022-05-21-new-york-times-bestsellers/",
    "title": "New York Times Bestsellers",
    "description": "Working with geom_jitter and ggrepel to create a great looking plot.",
    "author": [
      {
        "name": "Karat Sidhu",
        "url": {}
      }
    ],
    "date": "2022-05-10",
    "categories": [
      "TidyTuesday",
      "Data-Viz",
      "TidyVerse"
    ],
    "contents": "\n\nContents\nLoading\nLibraries\nLoading Data\nData Cleaning and basic\nEDA\nMaking the\nplot\n\nLooking at the New York Times Bestsellers by Decade; data by\nPost45\nLoading Libraries\n\n\nlibrary(tidyverse)\nlibrary(showtext)\nshowtext_opts(dpi = 450)\nshowtext_auto(enable = TRUE)\nlibrary(ggtext)\nlibrary(ggrepel)\nfont_add_google(family = \"Roboto\", name = \"Roboto\")\nfont_add_google(family = \"Outfit\", name = \"Outfit\")\n\n\n\nLoading Data\n\n\nnyt_titles <-\n    readr::read_tsv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-10/nyt_titles.tsv\")\nnyt_full <-\n    readr::read_tsv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-10/nyt_full.tsv\")\ncolors_legend <- c(\n    \"#FFB327\",\n    \"#08748f\",\n    \"#4F607C\",\n    \"#2d6554\",\n    \"#8E038E\",\n    \"#5A6D87\",\n    \"#000000\",\n    \"#725050\",\n    \"#542ea5\",\n    \"#304d30\",\n    \"#8E038E\"\n)\n\n\n\nData Cleaning and basic EDA\n\n\nnytitiles_weeks <- nyt_titles %>%\n    mutate(\n        decade = (year %/% 10) * 10\n    ) %>%\n    group_by(decade) %>%\n    slice(which.max(total_weeks)) %>%\n    mutate(title_new = paste(title, \"(\", total_weeks, \"Weeks )\"))\nnytitiles_weeks\n\n\n# A tibble: 10 × 10\n# Groups:   decade [10]\n      id title          author  year total_weeks first_week debut_rank\n   <dbl> <chr>          <chr>  <dbl>       <dbl> <date>          <dbl>\n 1   481 ANTHONY ADVER… Herve…  1933          86 1933-07-03          1\n 2  6157 THE ROBE       Lloyd…  1942         111 1942-11-09          5\n 3  4749 THE CAINE MUT… Herma…  1951         123 1951-04-22         13\n 4  6887 TO KILL A MOC… Harpe…  1960          98 1960-08-07         14\n 5  2363 ILLUSIONS      Richa…  1977          80 1977-06-19         10\n 6  4679 THE BONFIRE O… Tom W…  1987          56 1987-11-08          1\n 7  3343 OH, THE PLACE… Dr. S…  1990         178 1990-02-25         14\n 8  4918 THE DA VINCI … Dan B…  2003         165 2003-04-06          9\n 9   381 ALL THE LIGHT… Antho…  2014         132 2014-05-25          2\n10   414 AMERICAN DIRT  Jeani…  2020          34 2020-02-09         12\n# … with 3 more variables: best_rank <dbl>, decade <dbl>,\n#   title_new <chr>\n\nMaking the plot\n\n\nnyt_titles %>%\n    mutate(\n        decade = (year %/% 10) * 10\n    ) %>%\n    ggplot(aes(\n        x = as.factor(reorder(decade, -decade)),\n        y = total_weeks,\n        group = decade,\n        color = as.factor(decade)\n    )) +\n    geom_jitter(width = 0.25, alpha = 0.2, size = 0.85) +\n    geom_text_repel(aes(\n        label = title_new,\n        family = \"Outfit\"\n    ),\n    size = 4.5,\n    data = nytitiles_weeks, alpha = 0.9,\n    box.padding = 0.35\n    ) +\n    geom_point(\n        data = nytitiles_weeks,\n        aes(\n            x = as.factor(decade),\n            y = total_weeks\n        ),\n        size = 2\n    ) +\n    theme_minimal() +\n    labs(\n        title = \"NYTIMES BESTSELLERS\",\n        subtitle = \"**Bestsellers; by Decade.** <br>Looking at the number of weeks each book stayed on the NYTimes bestsellers<br> list every decade. Most popular bestselling book with the most weeks on the <br> list is labelled for each decade.\",\n        caption = \"Data: Post45 | Graphic: github.com/SidhuK\"\n    ) +\n    ylab(\"Weeks\") +\n    theme(\n        legend.position = \"none\",\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        plot.title = element_markdown(family = \"Cookie\", size = 10),\n        plot.subtitle = element_markdown(family = \"Outfit\", size = 18),\n        plot.caption = element_markdown(family = \"Outfit\", size = 12),\n        axis.title.y = element_blank(),\n        axis.title.x = element_text(size = 18),\n        axis.text = element_text(size = 14),\n    ) +\n    scale_color_manual(\n        values = colors_legend,\n        name = NULL\n    ) +\n    coord_flip()\n\n\n\n\n\n\n\n",
    "preview": "posts/2022-05-21-new-york-times-bestsellers/new-york-times-bestsellers_files/figure-html5/unnamed-chunk-4-1.png",
    "last_modified": "2022-05-21T12:18:55+05:30",
    "input_file": {},
    "preview_width": 1344,
    "preview_height": 1920
  },
  {
    "path": "posts/2022-05-21-making-streamgraphs-in-r/",
    "title": "Making streamgraphs in R",
    "description": "TidyTuesday May 03,2022 ; Power and Energy Capacity visualization.",
    "author": [
      {
        "name": "Karat Sidhu",
        "url": {}
      }
    ],
    "date": "2022-05-03",
    "categories": [
      "TidyTuesday",
      "Data-Viz",
      "TidyVerse"
    ],
    "contents": "\n\nContents\nLoading\nLibraries\nLoading and cleaning Data\nMaking the\nplot\nVisit my\nTidyTuesday Repo for a better look.\n\n\nTidyTuesday Dataset for Week of May 03, 2022. The dataset featured\nthe hidden gems files from Berkeley Lab/Dept of Energy.\nLoading Libraries\n\n\nlibrary(ggstream)\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(showtext)\nshowtext_opts(dpi = 450)\nshowtext_auto(enable = TRUE)\nlibrary(ggtext)\nfont_add_google(family = \"Bangers\", name = \"Bangers\")\n\n\n\nLoading and cleaning Data\n\n\ncapacity <-\n  readr::read_csv(\n    'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-03/capacity.csv'\n  )\nwind <-\n  readr::read_csv(\n    'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-03/wind.csv'\n  )\nsolar <-\n  readr::read_csv(\n    'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-03/solar.csv'\n  )\naverage_cost <-\n  readr::read_csv(\n    'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-03/average_cost.csv'\n  )\ncapacity <- capacity %>%\n  mutate(across(where(anyNA), ~ replace_na(., 0)))\ncapacity <- capacity %>%\n  mutate(prior = standalone_prior + hybrid_prior) %>%\n  mutate(new = standalone_new + hybrid_new)\n\n\n\nMaking the plot\n\n\ncolors_legend <- c(\"#FFB327\",\n                   \"#D1F1F9\",\n                   \"#4F607C\",\n                   \"#c5b689\",\n                   \"#8E038E\",\n                   \"#5A6D87\",\n                   \"#000000\")\nplot1 <- ggplot(capacity, aes(year, prior, fill = type)) +\n  geom_stream(\n    extra_span = .25,\n    true_range = \"none\",\n    bw = .85,\n    size = 1.25,\n    sorting = \"onset\"\n  ) +\n  geom_stream(\n    geom = \"contour\",\n    color = \"white\",\n    extra_span = .25,\n    true_range = \"none\",\n    bw = .85,\n    size = 0.09,\n    sorting = \"onset\"\n  ) +\n  scale_fill_manual(values = colors_legend,\n                    name = NULL) +\n  scale_x_continuous(breaks = c(2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020)) +\n  theme_minimal(base_family = \"Bangers\") +\n  theme(\n    plot.background = element_rect(fill = \"grey84\", color = NA),\n    panel.grid = element_blank(),\n    axis.title = element_blank(),\n    axis.text.y = element_blank(),\n    legend.position = \"bottom\",\n    legend.text = element_text(color = \"grey40\", size = 14),\n    legend.box.margin = margin(t = 30),\n    legend.background = element_rect(color = \"grey40\",\n                                     size = .3,\n                                     fill = \"grey95\"),\n    legend.key.height = unit(.25, \"lines\"),\n    legend.key.width = unit(2.5, \"lines\"),\n    plot.margin = margin(rep(20, 4))\n  ) +\n  labs(title = \"Prior Generation Capacity (Gigawatts)\") +\n  theme(plot.title = element_text(hjust = 0.5))\nplot1\n\n\n\nplot2 <- ggplot(capacity, aes(year, new, fill = type)) +\n  geom_stream(\n    extra_span = .25,\n    true_range = \"none\",\n    bw = .85,\n    size = 1.25,\n    sorting = \"onset\"\n  ) +\n  geom_stream(\n    geom = \"contour\",\n    color = \"white\",\n    extra_span = .25,\n    true_range = \"none\",\n    bw = .85,\n    size = 0.02,\n    sorting = \"onset\"\n  ) +\n  scale_fill_manual(values = colors_legend,\n                    name = NULL) +\n  scale_x_continuous(breaks = c(2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020)) +\n  theme_minimal(base_family = \"Bangers\") +\n  theme(\n    plot.background = element_rect(fill = \"grey84\", color = NA),\n    panel.grid = element_blank(),\n    axis.title = element_blank(),\n    axis.text.y = element_blank(),\n    legend.position = \"none\",\n    plot.margin = margin(rep(20, 4))\n  ) +\n  labs(title = \"New Generation Capacity (Gigawatts)\") +\n  theme(plot.title = element_text(hjust = 0.5))\nplot_final <- plot1 / plot2 +\n  plot_annotation(\n    title = 'Power Generation Capacity',\n    subtitle = 'The shreamcharts describe the power generation from various sources (solar, nuclear, wind, etc) along with <br>\n    their capacity over the years. The graphs are separated into New and Prior Generation <br> In Gigawatts. <br> ',\n    caption = 'Data: Berkeley Lab | Graphic: Github.com/SidhuK ',\n    theme = theme(\n      plot.title = element_text(size = 35, hjust = 0.5),\n      plot.subtitle = element_markdown(size = 15, hjust = 0.5),\n      plot.caption = element_text(size = 11, hjust = 0.5),\n      plot.background = element_rect(fill = \"grey84\", color = NA)\n    )\n  ) &\n  theme(text = element_text('Bangers'))\n\n\n\n\n\nplot_final\n\n\n\n\nVisit my\nTidyTuesday Repo for a better look.\n\n\n\n",
    "preview": "posts/2022-05-21-making-streamgraphs-in-r/making-streamgraphs-in-r_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-05-21T10:35:29+05:30",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to karat_codes",
    "description": "Welcome to my new blog, karat_codes.",
    "author": [
      {
        "name": "Karat Sidhu",
        "url": {}
      }
    ],
    "date": "2020-05-21",
    "categories": [
      "misc"
    ],
    "contents": "\nThis is a new blog that I made with distill package in R\nIts based on a custom css theme that I am constantly tweaking.\nSource code for everything available on my github.\ngithub.com/SidhuK\n\n\n\n",
    "preview": {},
    "last_modified": "2022-05-21T11:11:08+05:30",
    "input_file": {}
  }
]
